% Plotting average Temporal Response across participants for each category
% (Faces & Houses)
get_utils();
elect_selectionDir = '/home/lasse/Documents/ECoG_PRF_categories/Plots';
dataDir = '/home/lasse/Documents/ECoG_PRF_categories/data_A/derivatives/ECoGPreprocessed';

elect_selection = readtable(fullfile(elect_selectionDir,"1_electSelection_final.xls"));



%% Getting all epochs for all participants (excluding PRF trial responses - only CS)
epochs_acrossSubs = get_epochs_allPP(elect_selection, dataDir);
%% Averaging across participants to get Time response for faces and house selective electrodes
avg_elect = true;

if avg_elect
    TR_mean_Ho = zeros(614,1);
    TR_mean_Fa = zeros(614,1);
else
    TR_mean_Ho = zeros(614, sum(elect_selection.Selectivity == "HOUSES"));
    TR_mean_Fa = zeros(614, sum(elect_selection.Selectivity == "FACES"));
end

for sub = 1:length(epochs_acrossSubs)
    disp(epochs_acrossSubs(sub).Sub)

    %select the selected electrodes of each participant
    elect_selection_indv = elect_selection(elect_selection.Participant == epochs_acrossSubs(sub).Sub,:); 

    %make indexes to find which of these elctrodes are category selective
    elect_Fa = elect_selection_indv.Selectivity == "FACES";
    elect_Ho = elect_selection_indv.Selectivity == "HOUSES";
    
    

    %average accross epochs first over the 2nd(trials), then
    %3rd(electrodes) dimension and finally average with previous
    %participants TRs
    if avg_elect
        if any(sum(elect_Ho)) %check if index is nonzero
            TR_mean_Ho = mean([TR_mean_Ho, mean(mean(epochs_acrossSubs(sub).Data(:,:,elect_Ho), 2), 3)], 2);
        end
        if any(sum(elect_Fa))
            TR_mean_Fa = mean([TR_mean_Fa, mean(mean(epochs_acrossSubs(sub).Data(:,:,elect_Fa), 2), 3)], 2);
        end
    else 
        %make index for assigning the individual electrodes to the TR_elect array
        %house electrodes
        x = find(~any(TR_mean_Ho));
        
        if isempty(x)
            x(1) = 1;
        end
        
        if any(sum(elect_Ho)) %check if index is nonzero
            TR_mean_Ho(:,x(1):(x(1)-1)+sum(elect_Ho)) = squeeze(mean(epochs_acrossSubs(sub).Data(:,:,elect_Ho), 2));
        end
        
        %face electrodes
        x = find(~any(TR_mean_Fa));
        
        if isempty(x)
            x(1) = 1;
        end

        if any(sum(elect_Fa))
            TR_mean_Fa(:,x(1):(x(1)-1)+sum(elect_Fa)) = squeeze(mean(epochs_acrossSubs(sub).Data(:,:,elect_Fa), 2));
        end
    end
end

%% Plot Temporal Face and House responses
figure; hold on

plotTitle = "Average Temporal Response Across Participants";

set(gcf,'Units','points');
    if avg_elect; alp = 0.7;else; alp = 0.2; end
    f = plot(cat(1, TR_mean_Fa),'Color', [1,0.2,0,alp], 'LineWidth', 2,'DisplayName',"Face");
    h = plot(cat(1, TR_mean_Ho),'Color', [0,0.5,1,alp],'LineWidth', 2, 'DisplayName',"House");
    xlabel('Stimulus'); ylabel('Broadband response')
    set(gca, 'FontSize', 14)
    set(gca, 'XTickLabel', []);
    title(plotTitle);
    axis tight

    legend([unique({f.DisplayName}), unique({h.DisplayName})])
    
%% averaging accross high vs low eccentricity (not done)

elect_ecc_low = elect_selection(elect_selection.Eccentricity < 10,:);
elect_ecc_high = elect_selection(elect_selection.Eccentricity > 10,:);


elect_name_l = elect_ecc_low.Electrode(elect_ecc_low.Participant == "p02");
elect_name_h = elect_ecc_low.Electrode(elect_ecc_high.Participant == "p02");


strcmp(epochs_acrossSubs(1).Channels,string(elect_name_l))
strcmp(epochs_acrossSubs(1).Channels,string(elect_name_h))



%% Average Time to Peak per electrode for across trials to corresponding selectivity
epochs_acrossSubs = get_averageCSTS(epochs_acrossSubs, elect_selection);

%% Calculate Time to peak per electrode
epochs_acrossSubs = get_TtP(epochs_acrossSubs);

%% Plot Time to peak bar plot
% make a barplot
Ttp_faces = [epochs_acrossSubs.TtP_faces];
Ttp_houses = [epochs_acrossSubs.TtP_houses];

f = figure(); hold on;
c = bar([mean(Ttp_faces), mean(Ttp_houses)]);

% plot(1, ecc_l, "ok")
a = swarmchart(ones(1, size(Ttp_faces, 2)), Ttp_faces, "filled", "MarkerFaceAlpha",0.5);
b = swarmchart(2*ones(1, size(Ttp_houses,2)), Ttp_houses, "filled", "MarkerFaceAlpha",0.5);

a.XJitterWidth = 0.3;
b.XJitterWidth = 0.3;
%%
%calculate and plot error bars (std error of the mean)
stderr = [std(Ttp_hous)] ./ sqrt(sumstats.GroupCount);
er = errorbar(1:2, sumstats.mean_Eccentricity, stderr);
er.Color = [0,0,0];
er.LineStyle = "none";
er.LineWidth = 2;
title("Eccentricity")

pubgraph(f, 10, 0.5,"w", false)

xticks(1:2)
ax = gca;
ax.XTickLabels = sumstats.Selectivity;
hold off